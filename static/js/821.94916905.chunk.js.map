{"version":3,"file":"static/js/821.94916905.chunk.js","mappings":"sQAIMA,EAASC,EAAAA,GAAAA,GACTC,EAAUD,EAAAA,GAAAA,GCJhB,MAAiC,6BAAjC,EAAuE,qBAAvE,EAAwG,wB,SC6CxG,EAzCa,WACX,IACA,EFAa,SAAwBE,GACrC,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,uFAClBT,EADkB,uBAErBG,EAAU,IAFW,iCAMvBE,GAAa,GANU,kBAQEK,EAAAA,EAAAA,IAAA,UAClBX,EADkB,iBACFC,EADE,4BACyBH,EADzB,oBARF,OAWG,OAHlBc,EARe,QAWRC,OACXT,EAAUQ,EAASE,KAAKC,MAExBP,EAAS,gCAdU,kDAiBrBA,EAAS,KAAIQ,SAjBQ,QAmBvBV,GAAa,GAnBU,0DAAH,qDAsBtBI,GACD,GAAE,CAACT,IAEG,CAAEE,OAAAA,EAAQE,UAAAA,EAAWE,MAAAA,EAC7B,CEhCsCU,EADjBC,EAAAA,EAAAA,MAAZjB,SACAE,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UAAWE,EAA3B,EAA2BA,MACrBY,EAAY,IAAIC,IAUhBC,EAAkBlB,GAAUA,EAAOmB,KARpB,SAAAC,GAKnB,OAJIJ,EAAUK,IAAID,EAAME,MACtBF,EAAME,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAE7BT,EAAUU,IAAIN,EAAME,IACbF,CACR,IAID,OAAIlB,GACK,wCAGLE,GACK,qCAAaA,KAGjBc,GAA8C,IAA3BA,EAAgBS,QAKtC,iBAAKC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,qBACA,wBACGX,EAAgBC,KAAI,SAAAC,GAAK,OACxB,gBAAIQ,UAAWC,EAAf,UACGT,EAAMU,KADT,OACmBV,EAAMW,YADUX,EAAME,GADjB,UAPvB,8CAeV,C","sources":["fetch/fetchMovieActors.js","webpack://react-homework-template/./src/pages/movieDetails/cast/Cast.module.css?e625","pages/movieDetails/cast/Cast.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport apiData from '../API/apiData.json';\n\nconst apiKey = apiData[0].apiKey;\nconst baseUrl = apiData[0].baseUrl;\n\nexport default function useMovieActors(movieId) {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieActors = async () => {\n      if (!movieId) {\n        setActors([]);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await axios.get(\n          `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n        );\n        if (response.status === 200) {\n          setActors(response.data.cast);\n        } else {\n          setError('Error fetching movie actors.');\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n\n    fetchMovieActors();\n  }, [movieId]);\n\n  return { actors, isLoading, error };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"actorcontainer\":\"Cast_actorcontainer__GHw8x\",\"header\":\"Cast_header__a+MSu\",\"actorlist\":\"Cast_actorlist__6qLIr\"};","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport useMovieActors from '../../../fetch/fetchMovieActors';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { actors, isLoading, error } = useMovieActors(movieId);\n  const orginalId = new Set();\n\n  const handleSubmit = actor => {\n    if (orginalId.has(actor.id)) {\n      actor.id = Math.floor(Math.random() * 1000000);\n    }\n    orginalId.add(actor.id);\n    return actor;\n  };\n\n  const processedActors = actors && actors.map(handleSubmit);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!processedActors || processedActors.length === 0) {\n    return <div>No actors found..</div>;\n  }\n\n  return (\n    <div className={css.actorcontainer}>\n      <h1 className={css.header}>Actors</h1>\n      <ul>\n        {processedActors.map(actor => (\n          <li className={css.actorlist} key={actor.id}>\n            {actor.name} as {actor.character}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["apiKey","apiData","baseUrl","movieId","useState","actors","setActors","isLoading","setIsLoading","error","setError","useEffect","fetchMovieActors","axios","response","status","data","cast","message","useMovieActors","useParams","orginalId","Set","processedActors","map","actor","has","id","Math","floor","random","add","length","className","css","name","character"],"sourceRoot":""}